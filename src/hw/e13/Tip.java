/*
 * Copyright 2023 Kevin Wang
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the license at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the license is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * license for the specific language governing permissions and limitations under
 * the license.
 * */
/*
 * Oct 13, 2023
 * The following program asks the user for their current cs class grade and outputs
 * a unique tip. The program will try and use the cohere LLM, but will default
 * back to hardcoded tips (via a switch case statement) in the event of an api,
 * http, or connection error.
 * */
package hw.e13;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

//import java.io.BufferedReader;
//import java.io.InputStreamReader;
//import java.io.OutputStream;
//import java.net.HttpURLConnection;
//import java.net.URL;
import java.util.Random;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Tip {
    public static Object randChoice(Object[] a) {
        /*
         * Returns a random element from the given array
         */
        Random random = new Random();
        return a[random.nextInt(a.length)];
    }
    public static String getTip(String grade) {
        // try and request a tip generated by an LLM
        // if no network is present or my api key is no longer valid,
        // fallback to preprogrammed tips.
        try {
            // API endpoint and headers
            URL url = new URL("https://api.cohere.ai/v1/generate");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("accept", "application/json");
            // please dont steal my token
            connection.setRequestProperty("authorization", "Bearer 8Fane2NQzDcFrSvWafRmNzEfVpRcKanRHjrI2AC6");
            connection.setRequestProperty("content-type", "application/json");
            connection.setDoOutput(true);

            // Request payload
            String payload = "{\n" +
                    "  \"max_tokens\": 200,\n" +
                    "  \"truncate\": \"END\",\n" +
                    "  \"return_likelihoods\": \"NONE\",\n" +
                    "  \"temperature\": 2.1," +
                    "  \"frequency_penalty\": 0.76," +
                    "  \"prompt\": \"I am a high school computer science student learning java. my grade right now is %s. give me some tips for success.\"\n".formatted(grade) +
                    "}";

            // Send request
            OutputStream os = connection.getOutputStream();
            os.write(payload.getBytes());
            os.flush();

            // Get response
            int responseCode = connection.getResponseCode();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                // TODO: response keeps printing \n instead of new line
                inputLine = inputLine.replaceAll("\\n", "\n");
                response.append(inputLine);
            }

            in.close();

            // Print response
            // Extract the generated text using regex
            String responseString = response.toString();
            Pattern pattern = Pattern.compile("\"text\":\"(.*?)\"");
            Matcher matcher = pattern.matcher(responseString);

            if (matcher.find()) {
                String generatedText = matcher.group(1);
//                System.out.println(generatedText);
                generatedText = generatedText.toString().replaceAll("\n", "\n");
                return generatedText;
            } else {
                throw new Exception("Generation was not found");
            }
        } catch (Exception e) {
            // fall back to manual prompts in case of a http or connection error
            switch (grade) {
                case "A" -> {
                    return "Engage in programming competitions or hackathons to challenge yourself and gain experience in solving real-world problems.";
                } case "B" -> {
                    return "Study well-written Java code to understand different coding styles, best practices, and efficient ways to solve problems.";
                } case "C" -> {
                    return "Utilize online tutorials, documentation, and educational platforms like Codecademy, Udemy, Coursera, and free resources like Oracle's Java tutorials.";
                } case "D" -> {
                    return "Reach out to teachers, classmates, or experienced programmers for help and guidance when you encounter challenges or have questions.";
                } case "F" -> {
                    return "Ensure you have a solid understanding of fundamental programming concepts such as variables, data types, control structures (loops, conditionals), and functions/methods.";
                } default -> {
                    return "Practice, practice, practice - The more you practice Java, the better you will become at it. Try to complete a few coding problems or projects each week to help you improve.";
                }
            }
        }
    }
    public static void main(String[] args) {
        // establish objects
        Scanner sc = new Scanner(System.in);
        String grade;

        // ask user for grade
        System.out.print("What is your current grade? ");
        grade = sc.nextLine();

        // generate tips
        System.out.println("One second, generating tips...");
        System.out.println(Tip.getTip(grade));
    }
}
